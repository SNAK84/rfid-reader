#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RFID Reader System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import sys
import time
import subprocess
from dotenv import load_dotenv

load_dotenv()

class SystemTester:
    def __init__(self):
        self.tests_passed = 0
        self.tests_failed = 0
        
    def print_result(self, test_name, success, message=""):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        if success:
            print(f"‚úÖ {test_name}: PASSED")
            if message:
                print(f"   {message}")
            self.tests_passed += 1
        else:
            print(f"‚ùå {test_name}: FAILED")
            if message:
                print(f"   {message}")
            self.tests_failed += 1
        print()
    
    def test_python_dependencies(self):
        """–¢–µ—Å—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        required_packages = [
            'RPi.GPIO',
            'mysql.connector',
            'dotenv',
            'daemonize'
        ]
        
        missing_packages = []
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
            except ImportError:
                missing_packages.append(package)
        
        if missing_packages:
            self.print_result(
                "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", 
                False, 
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}"
            )
            return False
        else:
            self.print_result("Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", True)
            return True
    
    def test_environment_file(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        env_file = '.env'
        if not os.path.exists(env_file):
            self.print_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª", False, "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        required_vars = [
            'DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME',
            'DATA0_PIN', 'DATA1_PIN', 'LOG_DIR', 'PID_FILE'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            self.print_result(
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª", 
                False, 
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}"
            )
            return False
        else:
            self.print_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª", True)
            return True
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database import Database
            db = Database()
            if db.test_connection():
                self.print_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", True)
                return True
            else:
                self.print_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", False, "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª")
                return False
        except Exception as e:
            self.print_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", False, str(e))
            return False
    
    def test_gpio_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ GPIO"""
        try:
            import RPi.GPIO as GPIO
            GPIO.setmode(GPIO.BCM)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∏–Ω–∞–º
            data0_pin = int(os.getenv('DATA0_PIN'))
            data1_pin = int(os.getenv('DATA1_PIN'))
            
            GPIO.setup(data0_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            GPIO.setup(data1_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–æ–≤
            _ = GPIO.input(data0_pin)
            _ = GPIO.input(data1_pin)
            
            GPIO.cleanup()
            self.print_result("–î–æ—Å—Ç—É–ø –∫ GPIO", True)
            return True
        except Exception as e:
            self.print_result("–î–æ—Å—Ç—É–ø –∫ GPIO", False, str(e))
            return False
    
    def test_log_directory(self):
        """–¢–µ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤"""
        log_dir = os.getenv('LOG_DIR')
        try:
            os.makedirs(log_dir, exist_ok=True)
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
            test_log_file = os.path.join(log_dir, 'test.log')
            with open(test_log_file, 'w') as f:
                f.write('test')
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(test_log_file)
            
            self.print_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤", True)
            return True
        except Exception as e:
            self.print_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤", False, str(e))
            return False
    
    def test_pid_file_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ PID —Ñ–∞–π–ª—É"""
        pid_file = os.getenv('PID_FILE')
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PID —Ñ–∞–π–ª
            with open(pid_file, 'w') as f:
                f.write('12345')
            
            # –ß–∏—Ç–∞–µ–º PID —Ñ–∞–π–ª
            with open(pid_file, 'r') as f:
                pid = f.read().strip()
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(pid_file)
            
            self.print_result("PID —Ñ–∞–π–ª", True)
            return True
        except Exception as e:
            self.print_result("PID —Ñ–∞–π–ª", False, str(e))
            return False
    
    def test_rfid_reader_class(self):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ RFID Reader"""
        try:
            from rfid_reader import RFIDReader
            reader = RFIDReader()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            assert reader.validate_card_number(12345) == True
            assert reader.validate_card_number(0) == False
            assert reader.validate_card_number(None) == False
            
            reader.cleanup()
            self.print_result("RFID Reader –∫–ª–∞—Å—Å", True)
            return True
        except Exception as e:
            self.print_result("RFID Reader –∫–ª–∞—Å—Å", False, str(e))
            return False
    
    def test_database_class(self):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ Database"""
        try:
            from database import Database
            db = Database()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            assert db.validate_card_data(12345) == True
            assert db.validate_card_data(0) == False
            assert db.validate_card_data(None) == False
            assert db.validate_card_data("invalid") == False
            
            self.print_result("Database –∫–ª–∞—Å—Å", True)
            return True
        except Exception as e:
            self.print_result("Database –∫–ª–∞—Å—Å", False, str(e))
            return False
    
    def test_systemd_service(self):
        """–¢–µ—Å—Ç systemd —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-enabled', 'rfid-reader.service'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                self.print_result("Systemd —Å–µ—Ä–≤–∏—Å", True, "–°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω")
                return True
            else:
                self.print_result("Systemd —Å–µ—Ä–≤–∏—Å", False, "–°–µ—Ä–≤–∏—Å –Ω–µ –≤–∫–ª—é—á–µ–Ω")
                return False
        except Exception as e:
            self.print_result("Systemd —Å–µ—Ä–≤–∏—Å", False, str(e))
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RFID Reader System")
        print("=" * 50)
        print()
        
        tests = [
            ("Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.test_python_dependencies),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª", self.test_environment_file),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", self.test_database_connection),
            ("–î–æ—Å—Ç—É–ø –∫ GPIO", self.test_gpio_access),
            ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤", self.test_log_directory),
            ("PID —Ñ–∞–π–ª", self.test_pid_file_access),
            ("RFID Reader –∫–ª–∞—Å—Å", self.test_rfid_reader_class),
            ("Database –∫–ª–∞—Å—Å", self.test_database_class),
            ("Systemd —Å–µ—Ä–≤–∏—Å", self.test_systemd_service)
        ]
        
        for test_name, test_func in tests:
            try:
                test_func()
            except Exception as e:
                self.print_result(test_name, False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("=" * 50)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_failed}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {self.tests_passed/(self.tests_passed+self.tests_failed)*100:.1f}%")
        
        if self.tests_failed == 0:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
            return 0
        else:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {self.tests_failed} –ø—Ä–æ–±–ª–µ–º. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
            return 1

def main():
    tester = SystemTester()
    return tester.run_all_tests()

if __name__ == "__main__":
    sys.exit(main()) 